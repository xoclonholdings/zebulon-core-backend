import { type User, type InsertUser, type SecurityEvent, type InsertSecurityEvent, type ThreatPattern, type InsertThreatPattern, type SystemMetric, type InsertSystemMetric, type ZwapProtection, type EncryptionLayer, type NetworkNode, type BadActor, type InsertBadActor, type DataDeprecation, type InsertDataDeprecation, type QuantumProtocol, type InsertQuantumProtocol, type FaqCategory, type FaqItem, type InsertFaqItem, type HowToGuide, type InsertHowToGuide } from "../shared/schema.js";
export interface IStorage {
    sessionStore: any;
    getUser(id: number): Promise<User | undefined>;
    getUserByUsername(username: string): Promise<User | undefined>;
    getUserBySocialId(provider: string, socialId: string): Promise<User | undefined>;
    createUser(user: InsertUser): Promise<User>;
    createSocialUser(userData: any): Promise<User>;
    updateUserLastLogin(userId: number): Promise<void>;
    getSecurityEvents(limit?: number, offset?: number): Promise<SecurityEvent[]>;
    getSecurityEventsByTimeRange(startTime: Date, endTime: Date): Promise<SecurityEvent[]>;
    getSecurityEventsByType(eventType: string, limit?: number): Promise<SecurityEvent[]>;
    createSecurityEvent(event: InsertSecurityEvent): Promise<SecurityEvent>;
    updateSecurityEventStatus(id: number, status: string): Promise<SecurityEvent | undefined>;
    bulkCreateSecurityEvents(events: InsertSecurityEvent[]): Promise<SecurityEvent[]>;
    getThreatPatterns(): Promise<ThreatPattern[]>;
    createThreatPattern(pattern: InsertThreatPattern): Promise<ThreatPattern>;
    getActiveThreatPatterns(): Promise<ThreatPattern[]>;
    getLatestSystemMetrics(): Promise<SystemMetric[]>;
    getSystemMetricsByType(metricType: string, limit?: number): Promise<SystemMetric[]>;
    createSystemMetric(metric: InsertSystemMetric): Promise<SystemMetric>;
    bulkCreateSystemMetrics(metrics: InsertSystemMetric[]): Promise<SystemMetric[]>;
    getZwapProtectionStatus(): Promise<ZwapProtection[]>;
    updateZwapProtection(id: number, status: string, integrityScore: number): Promise<ZwapProtection | undefined>;
    getEncryptionLayers(): Promise<EncryptionLayer[]>;
    updateEncryptionLayer(id: number, status: string): Promise<EncryptionLayer | undefined>;
    getNetworkNodes(): Promise<NetworkNode[]>;
    updateNetworkNode(id: number, status: string): Promise<NetworkNode | undefined>;
    getBadActors(limit?: number): Promise<BadActor[]>;
    getBadActorsByThreatLevel(minLevel: number): Promise<BadActor[]>;
    createBadActor(actor: InsertBadActor): Promise<BadActor>;
    updateBadActor(id: number, updates: Partial<BadActor>): Promise<BadActor | undefined>;
    escalateBadActor(identifier: string): Promise<BadActor | undefined>;
    getActiveDeprecations(): Promise<DataDeprecation[]>;
    createDataDeprecation(deprecation: InsertDataDeprecation): Promise<DataDeprecation>;
    expireDeprecation(id: number): Promise<DataDeprecation | undefined>;
    getQuantumProtocols(): Promise<QuantumProtocol[]>;
    createQuantumProtocol(protocol: InsertQuantumProtocol): Promise<QuantumProtocol>;
    activateProtocol(id: number): Promise<QuantumProtocol | undefined>;
    getFaqCategories(): Promise<FaqCategory[]>;
    getFaqItems(): Promise<FaqItem[]>;
    createFaqItem(item: InsertFaqItem): Promise<FaqItem>;
    updateFaqItem(id: number, updates: Partial<InsertFaqItem>): Promise<FaqItem>;
    deleteFaqItem(id: number): Promise<void>;
    getHowToGuides(): Promise<HowToGuide[]>;
    getHowToGuideById(id: number): Promise<HowToGuide | undefined>;
    createHowToGuide(guide: InsertHowToGuide): Promise<HowToGuide>;
    updateHowToGuide(id: number, updates: Partial<InsertHowToGuide>): Promise<HowToGuide>;
    deleteHowToGuide(id: number): Promise<void>;
}
export declare class DatabaseStorage implements IStorage {
    sessionStore: null;
    constructor();
    getUser(id: number): Promise<User | undefined>;
    getUserByUsername(username: string): Promise<User | undefined>;
    updateUserLastLogin(userId: number): Promise<void>;
    getUserBySocialId(provider: string, socialId: string): Promise<User | undefined>;
    createSocialUser(userData: any): Promise<User>;
    createUser(userData: InsertUser): Promise<User>;
    upsertUser(userData: any): Promise<User>;
    getSecurityEvents(limit?: number, offset?: number): Promise<SecurityEvent[]>;
    getSecurityEventsByTimeRange(startTime: Date, endTime: Date): Promise<SecurityEvent[]>;
    getSecurityEventsByType(eventType: string, limit?: number): Promise<SecurityEvent[]>;
    bulkCreateSecurityEvents(events: InsertSecurityEvent[]): Promise<SecurityEvent[]>;
    createSecurityEvent(event: InsertSecurityEvent): Promise<SecurityEvent>;
    updateSecurityEventStatus(id: number, status: string): Promise<SecurityEvent | undefined>;
    getThreatPatterns(): Promise<ThreatPattern[]>;
    getActiveThreatPatterns(): Promise<ThreatPattern[]>;
    createThreatPattern(pattern: InsertThreatPattern): Promise<ThreatPattern>;
    getLatestSystemMetrics(): Promise<SystemMetric[]>;
    getSystemMetricsByType(metricType: string, limit?: number): Promise<SystemMetric[]>;
    bulkCreateSystemMetrics(metrics: InsertSystemMetric[]): Promise<SystemMetric[]>;
    createSystemMetric(metric: InsertSystemMetric): Promise<SystemMetric>;
    getZwapProtectionStatus(): Promise<ZwapProtection[]>;
    updateZwapProtection(id: number, status: string, integrityScore: number): Promise<ZwapProtection | undefined>;
    getEncryptionLayers(): Promise<EncryptionLayer[]>;
    updateEncryptionLayer(id: number, status: string): Promise<EncryptionLayer | undefined>;
    getNetworkNodes(): Promise<NetworkNode[]>;
    updateNetworkNode(id: number, status: string): Promise<NetworkNode | undefined>;
    getBadActors(limit?: number): Promise<BadActor[]>;
    getBadActorsByThreatLevel(minLevel: number): Promise<BadActor[]>;
    createBadActor(actor: InsertBadActor): Promise<BadActor>;
    updateBadActor(id: number, updates: Partial<BadActor>): Promise<BadActor | undefined>;
    escalateBadActor(identifier: string): Promise<BadActor | undefined>;
    getActiveDeprecations(): Promise<DataDeprecation[]>;
    createDataDeprecation(deprecation: InsertDataDeprecation): Promise<DataDeprecation>;
    expireDeprecation(id: number): Promise<DataDeprecation | undefined>;
    getQuantumProtocols(): Promise<QuantumProtocol[]>;
    createQuantumProtocol(protocol: InsertQuantumProtocol): Promise<QuantumProtocol>;
    activateProtocol(id: number): Promise<QuantumProtocol | undefined>;
    getFaqCategories(): Promise<FaqCategory[]>;
    getFaqItems(): Promise<FaqItem[]>;
    createFaqItem(item: InsertFaqItem): Promise<FaqItem>;
    updateFaqItem(id: number, updates: Partial<InsertFaqItem>): Promise<FaqItem>;
    deleteFaqItem(id: number): Promise<void>;
    getHowToGuides(): Promise<HowToGuide[]>;
    getHowToGuideById(id: number): Promise<HowToGuide | undefined>;
    createHowToGuide(guide: InsertHowToGuide): Promise<HowToGuide>;
    updateHowToGuide(id: number, updates: Partial<InsertHowToGuide>): Promise<HowToGuide>;
    deleteHowToGuide(id: number): Promise<void>;
}
export declare const storage: DatabaseStorage;
