/// --- ZEBULON TILE UPDATE SYSTEM MODELS ---
/// Ensure pgvector extension is enabled in your Postgres DB:
///   CREATE EXTENSION IF NOT EXISTS vector;

model AuditLog {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  userId       String?
  tile         String
  action       String
  idempotency  String
  payloadHash  String
  dryRun       Boolean  @default(false)
  success      Boolean
  latencyMs    Int
  diffSummary  String?
  message      String?
}

model MemoryNote {
  id        String   @id @default(cuid())
  scope     String   // "global" | "<tile>"
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doc {
  id        String   @id @default(cuid())
  source    String   // "upload" | "web" | "note"
  uri       String?
  title     String?
  createdAt DateTime @default(now())
  chunks    DocChunk[]
}

model DocChunk {
  id        String   @id @default(cuid())
  docId     String
  ord       Int
  text      String
  embedding Float[]
  createdAt DateTime @default(now())
  Doc       Doc      @relation(fields: [docId], references: [id])
}

model Turn {
  id             String   @id @default(cuid())
  conversationId String
  idx            Int
  role           String
  content        String
  toolName       String?
  toolArgs       Json?
  toolResult     Json?
  createdAt      DateTime @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email             String?            @unique(map: "users_email_unique") @db.VarChar
  firstName         String?            @map("first_name") @db.VarChar
  lastName          String?            @map("last_name") @db.VarChar
  profileImageUrl   String?            @map("profile_image_url") @db.VarChar
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamp(6)
  analytics         analytics[]
  chat_sessions     chat_sessions[]
  conversations     Conversation[]
  interaction_logs  interaction_log[]
  knowledge_base    knowledge_base[]
  project_memory    ProjectMemory[]
  scratchpad_memory ScratchpadMemory[]
  familyTrees       FamilyTree[]

  @@map("users")
}

model SystemStatus {
  id           Int      @id @default(autoincrement())
  component    String   @unique
  status       String
  lastChecked  DateTime @default(now()) @map("last_checked")
  details      String?
  responseTime Int?     @map("response_time")

  @@map("system_status")
}

model OracleMemory {
  id           Int      @id @default(autoincrement())
  label        String   @unique
  description  String
  content      String
  memoryType   String   @map("memory_type")
  status       String   @default("active")
  createdBy    String   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  lastModified DateTime @updatedAt @map("last_modified")

  @@map("oracle_memory")
}

model ModuleIntegration {
  id                String   @id @default(cuid())
  moduleName        String   @unique @map("module_name")
  displayName       String   @map("display_name")
  isConnected       Boolean  @default(false) @map("is_connected")
  integrationType   String?  @map("integration_type")
  integrationUrl    String?  @map("integration_url")
  integrationScript String?  @map("integration_script")
  integrationEmbed  String?  @map("integration_embed")
  integrationConfig Json?    @map("integration_config")
  connectedAppName  String?  @map("connected_app_name")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("module_integrations")
}

model FamilyTree {
  id         String   @id @default(cuid())
  userId     String  @map("user_id")
  filename   String
  data       Json
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  user       User     @relation(fields: [userId], references: [id])

  @@map("family_trees")
}
model Conversation {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  userId            String             @map("user_id") @db.VarChar
  title             String
  preview           String?
  model             String             @default("gpt-4o")
  isActive          Boolean?           @default(false) @map("is_active")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamp(6)
  mode              String             @default("chat")
  analytics         analytics[]
  chat_sessions     chat_sessions[]

  users             User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_user_id_users_id_fk")
  files             File[]
  memory_index      memory_index[]
  messages          Message[]
  turns             Turn[]
  scratchpad_memory ScratchpadMemory[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversationId String       @map("conversation_id") @db.VarChar
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  conversations  Conversation @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_conversation_id_conversations_id_fk")

  @@map("messages")
}

model File {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversationId   String         @map("conversation_id") @db.VarChar
  fileName         String         @map("file_name")
  originalName     String         @map("original_name")
  mimeType         String         @map("mime_type")
  size             Int
  status           String         @default("processing")
  extractedContent String?        @map("extracted_content")
  analysis         Json?
  createdAt        DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
  file_storage     file_storage[]
  conversations    Conversation   @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "files_conversation_id_conversations_id_fk")

  @@map("files")
}

model CoreMemory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  key         String    @unique(map: "core_memory_key_unique") @db.VarChar
  value       String
  description String?
  admin_only  Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("core_memory")
}

model ProjectMemory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id     String    @db.VarChar
  name        String    @db.VarChar
  description String?
  content     String
  type        String    @default("context")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_memory_user_id_users_id_fk")

  @@map("project_memory")
}

model ScratchpadMemory {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id         String        @db.VarChar
  conversation_id String?       @db.VarChar
  content         String
  tags            String[]
  expires_at      DateTime      @db.Timestamp(6)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  conversations   Conversation? @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "scratchpad_memory_conversation_id_conversations_id_fk")
  users           User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "scratchpad_memory_user_id_users_id_fk")

  @@map("scratchpad_memory")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("sessions")
}

model analytics {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id         String        @db.VarChar
  event_type      String
  event_data      Json?
  session_id      String?       @db.VarChar
  conversation_id String?       @db.VarChar
  duration        Int?
  metadata        Json?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  conversations   Conversation? @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "analytics_conversation_id_conversations_id_fk")
  users           User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "analytics_user_id_users_id_fk")

  @@index([created_at], map: "idx_analytics_created_at")
  @@index([event_type], map: "idx_analytics_event_type")
  @@index([session_id], map: "idx_analytics_session_id")
  @@index([user_id], map: "idx_analytics_user_id")
}

model cache_storage {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  cache_key   String    @unique(map: "cache_storage_cache_key_unique") @db.VarChar
  cache_value Json
  expiration  DateTime? @db.Timestamp(6)
  tags        String[]
  size        BigInt
  hit_count   Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([expiration], map: "idx_cache_expiration")
  @@index([cache_key], map: "idx_cache_key")
  @@index([tags], map: "idx_cache_tags")
}

model chat_sessions {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversation_id String       @db.VarChar
  user_id         String       @db.VarChar
  duration        Int?         @default(0)
  messages_used   Int?         @default(0)
  memory_usage    Int?         @default(0)
  created_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  conversations   Conversation @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_sessions_conversation_id_conversations_id_fk")
  users           User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_sessions_user_id_users_id_fk")
}

model interaction_log {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id    String    @db.VarChar
  prompt     String
  response   String
  timestamp  DateTime  @default(now()) @db.Timestamp(6)
  metadata   Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_log_user_id_users_id_fk")

  @@index([user_id], map: "idx_interaction_log_user_id")
  @@index([timestamp], map: "idx_interaction_log_timestamp")
}

model file_storage {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  file_id     String    @db.VarChar
  chunk_index Int
  chunk_data  String
  chunk_size  BigInt
  checksum    String    @db.VarChar
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  files       File      @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "file_storage_file_id_files_id_fk")

  @@index([chunk_index], map: "idx_file_storage_chunk_index")
  @@index([file_id], map: "idx_file_storage_file_id")
}

model knowledge_base {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id     String    @db.VarChar
  title       String
  content     String
  tags        String[]
  category    String
  is_public   Boolean?  @default(false)
  version     Int?      @default(1)
  parent_id   String?   @db.VarChar
  usage_count Int?      @default(0)
  rating      Float?    @default(0) @db.Real
  metadata    Json?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "knowledge_base_user_id_users_id_fk")

  @@index([category], map: "idx_kb_category")
  @@index([is_public], map: "idx_kb_public")
  @@index([tags], map: "idx_kb_tags")
  @@index([user_id], map: "idx_kb_user_id")
}

model memory_index {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversation_id String       @db.VarChar
  content_type    String
  content_id      String       @db.VarChar
  embedding       Float[]      @db.Real
  keywords        String[]
  summary         String?
  importance      Float?       @default(0.5) @db.Real
  access_count    Int?         @default(0)
  last_accessed   DateTime?    @default(now()) @db.Timestamp(6)
  created_at      DateTime?    @default(now()) @db.Timestamp(6)
  conversations   Conversation @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "memory_index_conversation_id_conversations_id_fk")

  @@index([content_type], map: "idx_memory_content_type")
  @@index([conversation_id], map: "idx_memory_conv_id")
  @@index([importance], map: "idx_memory_importance")
  @@index([last_accessed], map: "idx_memory_last_accessed")
}
