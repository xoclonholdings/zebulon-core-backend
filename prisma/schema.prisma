
model ZuluTask {
  id          String    @id @default(cuid())
  key         String   @unique
  name        String
  description String
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  runs        ZuluRun[] @relation("TaskRuns")
}

// --- ZLab Models ---

model Workspace {
  id           String   @id @default(cuid())
  name         String
  members      WorkspaceMember[]
  projects     Project[]
  notes        NotePage[]
  folders      Folder[]
  meetings     Meeting[]
  activities   Activity[]
  files        File[] // Uses existing File model
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([workspaceId, userId])
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model Project {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  name         String
  description  String?
  columns      Column[]
  tasks        Task[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Column {
  id         String  @id @default(cuid())
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
  title      String
  order      Int
  tasks      Task[]
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
  title       String
  description String?
  assigneeId  String?
  statusColId String?
  statusCol   Column? @relation(fields: [statusColId], references: [id])
  dueAt       DateTime?
  labels      String[] @default([])
  order       Int      @default(0)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task @relation(fields: [taskId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
}

model Meeting {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  title        String
  startsAt     DateTime?
  endsAt       DateTime?
  roomCode     String   @unique
  recordings   Recording[]
  createdAt    DateTime @default(now())
}

model Recording {
  id         String   @id @default(cuid())
  meetingId  String
  meeting    Meeting @relation(fields: [meetingId], references: [id])
  url        String
  durationMs Int
  createdAt  DateTime @default(now())
}

model NotePage {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  title        String
  slug         String   @unique
  snapshot     String
  updatedBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Folder {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  name         String
  parentId     String?
  parent       Folder? @relation("FolderToFolder", fields: [parentId], references: [id])
  children     Folder[] @relation("FolderToFolder")
  files        File[] // Uses existing File model
  createdAt    DateTime @default(now())
}

// File model already exists in Core schema; ZLab relations use that model

model Activity {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  actorId      String
  kind         String
  refId        String?
  message      String
  createdAt    DateTime @default(now())
}

model ZuluRun {
  id         String   @id @default(cuid())
  taskKey    String
  status     String   // "queued" | "running" | "ok" | "warn" | "error"
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  meta       Json?
  logs       Json?
  task       ZuluTask? @relation(fields: [taskKey], references: [key], name: "TaskRuns")
  @@index([taskKey])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email             String?            @unique(map: "users_email_unique") @db.VarChar
  firstName         String?            @map("first_name") @db.VarChar
  lastName          String?            @map("last_name") @db.VarChar
  profileImageUrl   String?            @map("profile_image_url") @db.VarChar
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamp(6)
  analytics         analytics[]
  chat_sessions     chat_sessions[]
  conversations     Conversation[]
  interaction_logs  interaction_log[]
  knowledge_base    knowledge_base[]
  project_memory    ProjectMemory[]
  scratchpad_memory ScratchpadMemory[]

  @@map("users")
}

// (removed HEAD/=======/>>>>>> markers and duplicate/legacy models)
model Conversation {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  userId            String             @map("user_id") @db.VarChar
  title             String
  preview           String?
  model             String             @default("gpt-4o")
  isActive          Boolean?           @default(false) @map("is_active")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @default(now()) @map("updated_at") @db.Timestamp(6)
  mode              String             @default("chat")
  analytics         analytics[]
  chat_sessions     chat_sessions[]
  users             User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "conversations_user_id_users_id_fk")
  files             File[]
  memory_index      memory_index[]
  messages          Message[]
  scratchpad_memory ScratchpadMemory[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversationId String       @map("conversation_id") @db.VarChar
  role           String
  content        String
  metadata       Json?
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  conversations  Conversation @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_conversation_id_conversations_id_fk")

  @@map("messages")
}

model File {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversationId   String?        @map("conversation_id") @db.VarChar
  fileName         String?        @map("file_name")
  originalName     String?        @map("original_name")
  mimeType         String?        @map("mime_type")
  size             Int?
  status           String?        @default("processing")
  extractedContent String?        @map("extracted_content")
  analysis         Json?
  createdAt        DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
  file_storage     file_storage[]
  conversations    Conversation?  @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "files_conversation_id_conversations_id_fk")

  // ZLab relations
  workspaceId      String?
  workspace        Workspace?     @relation(fields: [workspaceId], references: [id])
  folderId         String?
  folder           Folder?        @relation(fields: [folderId], references: [id])

  @@map("files")
}

model CoreMemory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  key         String    @unique(map: "core_memory_key_unique") @db.VarChar
  value       String
  description String?
  admin_only  Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("core_memory")
}

model ProjectMemory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id     String    @db.VarChar
  name        String    @db.VarChar
  description String?
  content     String
  type        String    @default("context")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_memory_user_id_users_id_fk")

  @@map("project_memory")
}

model ScratchpadMemory {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id         String        @db.VarChar
  conversation_id String?       @db.VarChar
  content         String
  tags            String[]
  expires_at      DateTime      @db.Timestamp(6)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  conversations   Conversation? @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "scratchpad_memory_conversation_id_conversations_id_fk")
  users           User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "scratchpad_memory_user_id_users_id_fk")

  @@map("scratchpad_memory")
}

model Session {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("sessions")
}

model analytics {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id         String        @db.VarChar
  event_type      String
  event_data      Json?
  session_id      String?       @db.VarChar
  conversation_id String?       @db.VarChar
  duration        Int?
  metadata        Json?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  conversations   Conversation? @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "analytics_conversation_id_conversations_id_fk")
  users           User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "analytics_user_id_users_id_fk")

  @@index([created_at], map: "idx_analytics_created_at")
  @@index([event_type], map: "idx_analytics_event_type")
  @@index([session_id], map: "idx_analytics_session_id")
  @@index([user_id], map: "idx_analytics_user_id")
}

model cache_storage {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  cache_key   String    @unique(map: "cache_storage_cache_key_unique") @db.VarChar
  cache_value Json
  expiration  DateTime? @db.Timestamp(6)
  tags        String[]
  size        BigInt
  hit_count   Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([expiration], map: "idx_cache_expiration")
  @@index([cache_key], map: "idx_cache_key")
  @@index([tags], map: "idx_cache_tags")
}

model chat_sessions {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversation_id String       @db.VarChar
  user_id         String       @db.VarChar
  duration        Int?         @default(0)
  messages_used   Int?         @default(0)
  memory_usage    Int?         @default(0)
  created_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  conversations   Conversation @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_sessions_conversation_id_conversations_id_fk")
  users           User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_sessions_user_id_users_id_fk")
}

model interaction_log {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id    String    @db.VarChar
  prompt     String
  response   String
  timestamp  DateTime  @default(now()) @db.Timestamp(6)
  metadata   Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "interaction_log_user_id_users_id_fk")

  @@index([user_id], map: "idx_interaction_log_user_id")
  @@index([timestamp], map: "idx_interaction_log_timestamp")
}

model file_storage {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  file_id     String    @db.VarChar
  chunk_index Int
  chunk_data  String
  chunk_size  BigInt
  checksum    String    @db.VarChar
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  files       File      @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "file_storage_file_id_files_id_fk")

  @@index([chunk_index], map: "idx_file_storage_chunk_index")
  @@index([file_id], map: "idx_file_storage_file_id")
}

model knowledge_base {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id     String    @db.VarChar
  title       String
  content     String
  tags        String[]
  category    String
  is_public   Boolean?  @default(false)
  version     Int?      @default(1)
  parent_id   String?   @db.VarChar
  usage_count Int?      @default(0)
  rating      Float?    @default(0) @db.Real
  metadata    Json?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "knowledge_base_user_id_users_id_fk")

  @@index([category], map: "idx_kb_category")
  @@index([is_public], map: "idx_kb_public")
  @@index([tags], map: "idx_kb_tags")
  @@index([user_id], map: "idx_kb_user_id")
}

model memory_index {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  conversation_id String       @db.VarChar
  content_type    String
  content_id      String       @db.VarChar
  embedding       Float[]      @db.Real
  keywords        String[]
  summary         String?
  importance      Float?       @default(0.5) @db.Real
  access_count    Int?         @default(0)
  last_accessed   DateTime?    @default(now()) @db.Timestamp(6)
  created_at      DateTime?    @default(now()) @db.Timestamp(6)
  conversations   Conversation @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "memory_index_conversation_id_conversations_id_fk")

  @@index([content_type], map: "idx_memory_content_type")
  @@index([conversation_id], map: "idx_memory_conv_id")
  @@index([importance], map: "idx_memory_importance")
  @@index([last_accessed], map: "idx_memory_last_accessed")

}
