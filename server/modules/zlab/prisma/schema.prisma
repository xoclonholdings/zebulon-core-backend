// ZLab Prisma schema extension
// This file can be merged into your main schema.prisma as needed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id           String   @id @default(cuid())
  name         String
  members      WorkspaceMember[]
  projects     Project[]
  notes        NotePage[]
  folders      Folder[]
  meetings     Meeting[]
  activities   Activity[]
  files        File[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([workspaceId, userId])
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model Project {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  name         String
  description  String?
  columns      Column[]
  tasks        Task[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Column {
  id         String  @id @default(cuid())
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
  title      String
  order      Int
  tasks      Task[]
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  project     Project @relation(fields: [projectId], references: [id])
  title       String
  description String?
  assigneeId  String?
  statusColId String?
  statusCol   Column? @relation(fields: [statusColId], references: [id])
  dueAt       DateTime?
  labels      String[] @default([])
  order       Int      @default(0)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task @relation(fields: [taskId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
}

model Meeting {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  title        String
  startsAt     DateTime?
  endsAt       DateTime?
  roomCode     String   @unique
  recordings   Recording[]
  createdAt    DateTime @default(now())
}

model Recording {
  id         String   @id @default(cuid())
  meetingId  String
  meeting    Meeting @relation(fields: [meetingId], references: [id])
  url        String
  durationMs Int
  createdAt  DateTime @default(now())
}

model NotePage {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  title        String
  slug         String   @unique
  snapshot     String
  updatedBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Folder {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  name         String
  parentId     String?
  parent       Folder? @relation("FolderToFolder", fields: [parentId], references: [id])
  children     Folder[] @relation("FolderToFolder")
  files        File[]
  createdAt    DateTime @default(now())
}

model File {
  id         String   @id @default(cuid())
  folderId   String?
  folder     Folder? @relation(fields: [folderId], references: [id])
  workspaceId String
  workspace  Workspace @relation(fields: [workspaceId], references: [id])
  name       String
  mime       String
  size       Int
  storageKey String
  createdBy  String
  createdAt  DateTime @default(now())
}

model Activity {
  id           String   @id @default(cuid())
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  actorId      String
  kind         String
  refId        String?
  message      String
  createdAt    DateTime @default(now())
}
